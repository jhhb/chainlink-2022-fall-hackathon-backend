/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { VRFD20, VRFD20Interface } from "../../contracts/VRFD20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    name: "DiceLanded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "roller",
        type: "address",
      },
    ],
    name: "DiceRolled",
    type: "event",
  },
  {
    inputs: [],
    name: "getKeyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSubscriptionId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user_address",
        type: "address",
      },
    ],
    name: "house",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rollDice",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526001600060146101000a81548160ff021916908360ff1602179055506002600060156101000a81548160ff021916908360ff160217905550619c40600260006101000a81548163ffffffff021916908363ffffffff1602179055506003600260046101000a81548161ffff021916908361ffff1602179055506001600260066101000a81548163ffffffff021916908363ffffffff160217905550348015620000ac57600080fd5b506040516200175d3803806200175d8339818101604052810190620000d291906200020a565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336002600a6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060166101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806001819055505050506200030b565b600081519050620001d681620002bd565b92915050565b600081519050620001ed81620002d7565b92915050565b6000815190506200020481620002f1565b92915050565b600080600060608486031215620002265762000225620002b8565b5b60006200023686828701620001f3565b93505060206200024986828701620001c5565b92505060406200025c86828701620001dc565b9150509250925092565b6000620002738262000284565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620002c88162000266565b8114620002d457600080fd5b50565b620002e2816200027a565b8114620002ee57600080fd5b50565b620002fc81620002a4565b81146200030857600080fd5b50565b60805160601c61142c62000331600039600081816101040152610158015261142c6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631fe543e31461005c578063331bf12514610078578063837e7cc614610096578063b1cad5e3146100b4578063de3d9fb7146100e4575b600080fd5b61007660048036038101906100719190610d29565b610102565b005b6100806101c2565b60405161008d9190610eaa565b60405180910390f35b61009e6101cc565b6040516100ab9190610f9a565b60405180910390f35b6100ce60048036038101906100c99190610ccf565b610457565b6040516100db9190610f18565b60405180910390f35b6100ec6105bf565b6040516100f99190610fb5565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101ab929190610e81565b60405180910390fd5b6101be82826105dc565b5050565b6000600154905090565b600080339050600060149054906101000a900460ff1660ff16600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025d90610f7a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600154600060169054906101000a900467ffffffffffffffff16600260049054906101000a900461ffff16600260009054906101000a900463ffffffff16600260069054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610313959493929190610ec5565b602060405180830381600087803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190610cfc565b9150806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060149054906101000a900460ff1660ff16600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16827f3e7fdeab84c01ce5308321caa0b460e1c4ec3c7099223d79634d9a71d99932e360405160405180910390a35090565b60606000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610f5a565b60405180910390fd5b600060149054906101000a900460ff1660ff16600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610f3a565b60405180910390fd5b6105b8600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461071a565b9050919050565b60008060169054906101000a900467ffffffffffffffff16905090565b60006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160148460008151811061062e5761062d611232565b5b602002602001015161064091906111a3565b61064a919061103d565b905080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060159054906101000a900460ff1660ff16600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080847f54d97c1f7e5abad75bd421455cd4dd296852a52e1ea721f2cdb66d06fa2082a960405160405180910390a350505050565b606060006040518061028001604052806040518060400160405280600981526020017f54617267617279656e000000000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f4c616e6e6973746572000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f537461726b00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f547972656c6c000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f426172617468656f6e000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4d617274656c6c0000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f54756c6c7900000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f426f6c746f6e000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f477265796a6f790000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f417272796e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f467265790000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4d6f726d6f6e740000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f5461726c6579000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f4461796e6500000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f556d62657200000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f56616c6572796f6e00000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f4d616e6465726c7900000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f436c6567616e650000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f476c6f766572000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f4b6172737461726b000000000000000000000000000000000000000000000000815250815250905080600184610bd49190611093565b60148110610be557610be4611232565b5b6020020151915050919050565b6000610c05610c0084610ff5565b610fd0565b90508083825260208201905082856020860282011115610c2857610c27611295565b5b60005b85811015610c585781610c3e8882610ca5565b845260208401935060208301925050600181019050610c2b565b5050509392505050565b600081359050610c71816113c8565b92915050565b600082601f830112610c8c57610c8b611290565b5b8135610c9c848260208601610bf2565b91505092915050565b600081359050610cb4816113df565b92915050565b600081519050610cc9816113df565b92915050565b600060208284031215610ce557610ce461129f565b5b6000610cf384828501610c62565b91505092915050565b600060208284031215610d1257610d1161129f565b5b6000610d2084828501610cba565b91505092915050565b60008060408385031215610d4057610d3f61129f565b5b6000610d4e85828601610ca5565b925050602083013567ffffffffffffffff811115610d6f57610d6e61129a565b5b610d7b85828601610c77565b9150509250929050565b610d8e816110c7565b82525050565b610d9d816110d9565b82525050565b6000610dae82611021565b610db8818561102c565b9350610dc881856020860161113f565b610dd1816112a4565b840191505092915050565b6000610de960258361102c565b9150610df4826112b5565b604082019050919050565b6000610e0c60348361102c565b9150610e1782611304565b604082019050919050565b6000610e2f60448361102c565b9150610e3a82611353565b606082019050919050565b610e4e816110e3565b82525050565b610e5d81611111565b82525050565b610e6c8161111b565b82525050565b610e7b8161112b565b82525050565b6000604082019050610e966000830185610d85565b610ea36020830184610d85565b9392505050565b6000602082019050610ebf6000830184610d94565b92915050565b600060a082019050610eda6000830188610d94565b610ee76020830187610e72565b610ef46040830186610e45565b610f016060830185610e63565b610f0e6080830184610e63565b9695505050505050565b60006020820190508181036000830152610f328184610da3565b905092915050565b60006020820190508181036000830152610f5381610ddc565b9050919050565b60006020820190508181036000830152610f7381610dff565b9050919050565b60006020820190508181036000830152610f9381610e22565b9050919050565b6000602082019050610faf6000830184610e54565b92915050565b6000602082019050610fca6000830184610e72565b92915050565b6000610fda610feb565b9050610fe68282611172565b919050565b6000604051905090565b600067ffffffffffffffff8211156110105761100f611261565b5b602082029050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061104882611111565b915061105383611111565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611088576110876111d4565b5b828201905092915050565b600061109e82611111565b91506110a983611111565b9250828210156110bc576110bb6111d4565b5b828203905092915050565b60006110d2826110f1565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60005b8381101561115d578082015181840152602081019050611142565b8381111561116c576000848401525b50505050565b61117b826112a4565b810181811067ffffffffffffffff8211171561119a57611199611261565b5b80604052505050565b60006111ae82611111565b91506111b983611111565b9250826111c9576111c8611203565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f596f752061726520616c726561647920726f6c6c696e672e20506c656173652060008201527f776169742e000000000000000000000000000000000000000000000000000000602082015250565b7f596f75206d7573742066697273742063616c6c20726f6c6c446963652062656660008201527f6f72652067657474696e67206120686f7573652e000000000000000000000000602082015250565b7f596f75206d757374207761697420666f7220796f75722063757272656e74207260008201527f6f6c6c20746f20636f6d706c657465206265666f726520726f6c6c696e67206160208201527f6761696e00000000000000000000000000000000000000000000000000000000604082015250565b6113d1816110c7565b81146113dc57600080fd5b50565b6113e881611111565b81146113f357600080fd5b5056fea2646970667358221220ee08decc9444c43a22a9f18c2c488e08a945e9cd0f4b7444bd7f489a3a08528964736f6c63430008070033";

type VRFD20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFD20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFD20__factory extends ContractFactory {
  constructor(...args: VRFD20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    subscriptionId: PromiseOrValue<BigNumberish>,
    vrfCoordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VRFD20> {
    return super.deploy(
      subscriptionId,
      vrfCoordinator,
      keyHash,
      overrides || {}
    ) as Promise<VRFD20>;
  }
  override getDeployTransaction(
    subscriptionId: PromiseOrValue<BigNumberish>,
    vrfCoordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      subscriptionId,
      vrfCoordinator,
      keyHash,
      overrides || {}
    );
  }
  override attach(address: string): VRFD20 {
    return super.attach(address) as VRFD20;
  }
  override connect(signer: Signer): VRFD20__factory {
    return super.connect(signer) as VRFD20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFD20Interface {
    return new utils.Interface(_abi) as VRFD20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): VRFD20 {
    return new Contract(address, _abi, signerOrProvider) as VRFD20;
  }
}
